{"version":3,"sources":["MonteCarlo/Description.js","components/Loader.js","MonteCarlo/Simulation2.js","MonteCarlo/Parameters.js","MonteCarlo/MonteCarlo.js","components/Footer.js","components/Header.js","Homepage/Description.js","Homepage/Navigation.js","Homepage/Homepage.js","App.js","reportWebVitals.js","index.js"],"names":["Description","Container","Row","Col","style","textAlign","margin","Loader","marginTop","Spinner","animation","role","height","width","display","className","Simulation2","iteration","framerate","useState","data","setData","loading","setLoading","currentFrame","setCurrentFrame","useEffect","a","axios","get","getData","console","log","x","points","y","type","mode","marker","color","circle","layout","window","innerWidth","innerHeight","l","r","b","t","pad","showlegend","xaxis","range","yaxis","font","family","size","approx_pi_x","approx_pi_y","name","line","Pi","dash","legend","xanchor","title","tick0","dtick","min","max","step","value","onChange","e","target","iterationChangeHandler","inside","outside","approx_pi","toFixed","Parameters","state","document","getElementById","setState","framerateChangeHandler","useDebugValue","this","showSimulation","Number","setStateAsync","disableSimulationButton","successButtonVariant","resetButtonVariant","Promise","resolve","Form","Label","Control","id","placeholder","disabled","as","Button","variant","onClick","simulateOnClickHandler","props","resetHandler","Component","MonteCarlo","marginBottom","Footer","minHeight","Header","Navbar","bg","expand","collapseOnSelect","to","Brand","Toggle","aria-controls","Collapse","Nav","Link","Navigation","cursor","src","hover","fluid","alt","Homepage","App","path","component","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"kRA8BeA,EA1BK,WAChB,OAEI,gCACI,6CACA,eAACC,EAAA,EAAD,WACI,gJAEA,6NAEA,cAACC,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CAAKC,MAAO,CAAEC,UAAW,UAAzB,SACI,+CACe,yCADf,YAC0C,yCAD1C,gDAQZ,oBAAID,MAAO,CAAEE,OAAQ,c,4GCElBC,MAvBf,WACI,OACI,sBACIH,MAAO,CAAEI,UAAW,QADxB,UAGI,cAACC,EAAA,EAAD,CACIC,UAAU,SACVC,KAAK,SACLP,MAAO,CACHQ,OAAQ,QACRC,MAAO,QACPP,OAAQ,OACRQ,QAAS,SAPjB,SAUI,sBAAMC,UAAU,UAAhB,0BAEJ,oBAAIX,MAAO,CAACC,UAAW,SAAUG,UAAW,QAA5C,4B,iBC+MGQ,MA3Nf,YAAgD,IAAzBC,EAAwB,EAAxBA,UAAWC,EAAa,EAAbA,UAE9B,EAAwBC,qBAAxB,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA8BF,oBAAS,GAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAAwCJ,mBAAS,GAAjD,mBAAOK,EAAP,KAAqBC,EAArB,KAyBA,OAtBAC,qBAAU,WACFJ,GAAS,uCACT,WAAuBL,EAAWC,GAAlC,iBAAAS,EAAA,sEAC2BC,IAAMC,IAAN,gCAAmCZ,EAAnC,sBAA0DC,IADrF,gBACYE,EADZ,EACYA,KACRC,EAAQD,GACRG,GAAW,GAHf,2CADS,uDAOTO,CAAQb,EAAWC,MAU3Ba,QAAQC,IAAId,GAKR,gCACI,oBAAId,MAAO,CAAEI,UAAW,QAAxB,yBAEIc,EACI,cAAC,EAAD,IAEA,eAACrB,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CACIa,UAAU,gCAGd,eAACb,EAAA,EAAD,WAEI,cAACC,EAAA,EAAD,UAEI,cAAC,IAAD,CACIiB,KAAM,CACF,CACIa,EAAGb,EAAKc,OAAOV,GAAcS,EAC7BE,EAAGf,EAAKc,OAAOV,GAAcW,EAC7BC,KAAM,UACNC,KAAM,UACNC,OAAQ,CAAEC,MAAOnB,EAAKc,OAAOV,GAAce,QAE/C,CACIN,EAAGb,EAAKoB,OAAOP,EACfE,EAAGf,EAAKoB,OAAOL,EACfE,KAAM,OACNC,OAAQ,CAAEC,MAAOnB,EAAKoB,OAAOD,SAGrCE,OAAQ,CACJ5B,MAAO6B,OAAOC,WAAa,IAAMD,OAAOE,YAAc,IAAMF,OAAOC,WAAa,IAAMD,OAAOE,YAAc,IAC3GhC,OAAQ8B,OAAOC,WAAa,IAAMD,OAAOE,YAAc,IAAMF,OAAOC,WAAa,IAAMD,OAAOE,YAAc,IAG5GtC,OAAQ,CACJuC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,IAAK,GAETC,YAAY,EACZC,MAAO,CACHC,MAAO,EAAE,IAAK,MAElBC,MAAO,CACHD,MAAO,EAAE,IAAK,MAElBE,KAAM,CACFC,OAAQ,YACRC,KAAM,SAOtB,cAACrD,EAAA,EAAD,UAEI,cAAC,IAAD,CACIiB,KAAM,CACF,CACIa,EAAGb,EAAKc,OAAOV,GAAciC,YAC7BtB,EAAGf,EAAKc,OAAOV,GAAckC,YAC7BC,KAAM,gBACNrB,OAAQ,CAAEC,MAAO,SACjBF,KAAM,QACNuB,KAAM,CACF/C,MAAO,IAIf,CACIoB,EAAGb,EAAKyC,GAAG5B,EACXE,EAAGf,EAAKyC,GAAG1B,EACXwB,KAAM,KACNtB,KAAM,QACNuB,KAAM,CACFE,KAAM,UACNjD,MAAO,GAEXyB,OAAQ,CAAEC,MAAO,WAIzBE,OAAQ,CACJ5B,MAAO6B,OAAOC,WAAa,IAAMD,OAAOE,YAAc,IAAMF,OAAOC,WAAa,IAAMD,OAAOE,YAAc,IAC3GhC,OAAQ8B,OAAOC,WAAa,IAAMD,OAAOE,YAAc,IAAMF,OAAOC,WAAa,IAAMD,OAAOE,YAAc,IAE5GtC,OAAQ,CACJuC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,IAAK,GAETC,YAAY,EACZa,OAAQ,CACJ9B,EAAG,EACH+B,QAAS,QACT7B,EAAG,GAEPgB,MAAO,CACHC,MAAO,CAAC,EAAGnC,GACXgD,MAAO,aACPC,MAAO,EACPC,MAAOjD,GAEXmC,MAAO,CACHD,MAAO,CAAC,EAAG,GACXc,MAAO,EACPC,MAAO,GAEXb,KAAM,CACFC,OAAQ,YACRC,KAAM,SAUtB,uBACIpB,KAAK,QACLgC,IAAK,EAELC,IAAMpD,EAAYC,EAClByC,KAAK,mBACLvD,MAAO,CAAEQ,OAAQ,MAAOC,MAAO,QAC/ByD,KAAM,EACNC,MAAO/C,EACPgD,SAAU,SAACC,GAAD,OAlJP,SAACA,GAC5B,IAAMF,EAAQE,EAAEC,OAAOH,MACvB9C,EAAgB8C,GAgJyBI,CAAuBF,SAIhD,qBAAIrE,MAAO,CAAEC,UAAW,SAAUG,UAAW,QAA7C,qBAAgEgB,EAAhE,OACA,qBAAIpB,MAAO,CAAEC,UAAW,UAAxB,yBAAiDmB,EAAeN,EAAhE,OAGA,eAAChB,EAAA,EAAD,CAAKE,MAAO,CAAEI,UAAW,QAAzB,UAEI,eAACL,EAAA,EAAD,WACI,oBAAIC,MAAO,CAAEmC,MAAO,UAAWlC,UAAW,UAA1C,oBAGA,oBAAID,MAAO,CAAEmC,MAAO,QAAS/B,UAAW,OAAQH,UAAW,UAA3D,SACKe,EAAKc,OAAOV,GAAcoD,YAGnC,eAACzE,EAAA,EAAD,WACI,oBAAIC,MAAO,CAAEmC,MAAO,UAAWlC,UAAW,UAA1C,qBAGA,oBAAID,MAAO,CAAEmC,MAAO,QAAS/B,UAAW,OAAQH,UAAW,UAA3D,SACKe,EAAKc,OAAOV,GAAcqD,aAInC,eAAC1E,EAAA,EAAD,WACI,oBAAIC,MAAO,CAAEmC,MAAO,QAASlC,UAAW,UAAxC,oBAGA,oBAAID,MAAO,CAAEI,UAAW,OAAQH,UAAW,UAA3C,SACKe,EAAKc,OAAOV,GAAcsD,UAAUC,QAAQ,kBCwDlEC,G,kNA5PXC,MAAQ,CACJ,UAAa,IACb,UAAa,IACb,gBAAkB,EAClB,yBAA2B,EAC3B,qBAAwB,UACxB,mBAAsB,a,EAqB1BN,uBAAyB,SAACF,GACtB,IAAIF,EAAQE,EAAEC,OAAOH,MACP,IAAVA,IACAA,EAAQ,GACZW,SAASC,eAAe,UAAUZ,MAAQA,EAC1C,EAAKa,SAAS,CACVnE,UAAWsD,IAEX,EAAKU,MAAM/D,UAAY,EAAK+D,MAAMhE,WAClC,EAAKmE,SAAS,CACVlE,UAAWqD,K,EAKvBc,uBAAyB,SAACZ,GACtB,IAAIF,EAAQE,EAAEC,OAAOH,MAEjBA,EAAQ,IACRA,EAAQ,IACDA,EAAQ,IACfA,EAAQ,IACDe,gBAAgB,IACvBf,EAAQ,IACDA,EAAQ,GACfA,EAAQ,IACDA,EAAQ,GACfA,EAAQ,GACDA,EAAQ,GACfA,EAAQ,GACDA,EAAQ,EACfA,EAAQ,GACDA,EAAQ,EACfA,EAAQ,EACDA,EAAQ,IACfA,EAAQ,GAIZ,EAAKa,SAAS,CACVlE,UAAWqD,K,uDAzDnB,WACIgB,KAAKH,SAAS,CACVI,gBAAgB,M,gCAIxB,WAGQC,OAAOF,KAAKN,MAAM/D,WAAauE,OAAOF,KAAKN,MAAMhE,YACjDsE,KAAKH,SAAS,CACVlE,UAAWuE,OAAOF,KAAKN,MAAMhE,e,iEAkDzC,sBAAAU,EAAA,6DAEIuD,SAASC,eAAe,UAAUZ,MAAQ,IAF9C,SAcUgB,KAAKG,cAAc,CAAEzE,UAAW,MAd1C,uBAeUsE,KAAKG,cAAc,CAAGxE,UAAW,MAf3C,uBAgBUqE,KAAKG,cAAc,CAAGF,gBAAgB,IAhBhD,uBAiBUD,KAAKG,cAAc,CAAEC,yBAAyB,IAjBxD,wBAkBUJ,KAAKG,cAAc,CAAGE,qBAAuB,YAlBvD,yBAmBUL,KAAKG,cAAc,CAAGG,mBAAmB,cAnBnD,iD,iIAwBA,sBAAAlE,EAAA,sEACU4D,KAAKG,cAAc,CAAEF,gBAAgB,IAD/C,uBAEUD,KAAKG,cAAc,CAAEC,yBAAyB,IAFxD,uBAGUJ,KAAKG,cAAc,CAAEE,qBAAsB,cAHrD,uBAIUL,KAAKG,cAAc,CAAEG,mBAAoB,SAJnD,gD,iFAUA,SAAcZ,GAAQ,IAAD,OACjB,OAAO,IAAIa,SAAQ,SAACC,GAChB,EAAKX,SAASH,EAAOc,Q,oBAI7B,WAAU,IAAD,OACL,OACI,gCAEI,6CAEA,eAAC9F,EAAA,EAAD,WAEI,eAACC,EAAA,EAAD,WACI,eAACC,EAAA,EAAD,WACI,cAAC6F,EAAA,EAAKC,MAAN,UACI,kDAKJ,cAACD,EAAA,EAAKE,QAAN,CACIC,GAAG,SACH/D,KAAK,SACLgE,YAAab,KAAKN,MAAMhE,UACxBb,MAAO,CAAES,MAAO,OAChB2D,SAAU,SAACC,GAAD,OAAO,EAAKE,uBAAuBF,IAC7C4B,SAAUd,KAAKN,MAAMU,0BAGzB,uBACIvD,KAAK,QACLgC,IAAI,IACJC,IAAI,QACJV,KAAK,mBACLvD,MAAO,CAAEQ,OAAQ,MAAOC,MAAO,OAC/ByD,KAAK,MACLC,MAAOgB,KAAKN,MAAMhE,UAAY,EAC9BuD,SAAU,SAACC,GAAD,OAAO,EAAKE,uBAAuBF,IAC7C4B,SAAUd,KAAKN,MAAMU,6BAG7B,eAACxF,EAAA,EAAD,WAII,cAAC6F,EAAA,EAAKC,MAAN,UACI,kDAgBJ,eAACD,EAAA,EAAKE,QAAN,CACII,GAAG,SACH/B,MAASgB,KAAKN,MAAM/D,UACpBsD,SAAU,SAACC,GAAD,OAAO,EAAKY,uBAAuBZ,IAC7CrE,MAAO,CAACS,MAAM,OACdwF,SAAUd,KAAKN,MAAMU,wBALzB,UAOI,wBAAQpB,MAAO,EAAf,eACA,wBAAQA,MAAO,GAAf,gBACA,wBAAQA,MAAO,GAAf,gBACA,wBAAQA,MAAO,IAAf,iBACA,wBAAQA,MAAO,IAAf,iBACA,wBAAQA,MAAO,IAAf,qBAKJ,uBACInC,KAAK,QACLgC,IAAK,EACLC,IAAKkB,KAAKN,MAAMhE,UAAY,IAAOsE,KAAKN,MAAMhE,UAAY,IAE1D0C,KAAK,YACLvD,MAAO,CAAEQ,OAAQ,MAAOC,MAAO,OAC/B0D,MAAOgB,KAAKN,MAAM/D,UAClBsD,SAAU,SAACC,GAAD,OAAO,EAAKY,uBAAuBZ,IAC7C4B,SAAUd,KAAKN,MAAMU,6BAK7B,eAACxF,EAAA,EAAD,CAAKC,MAAO,CAAEI,UAAW,QAAzB,UACI,cAAC+F,EAAA,EAAD,CACIC,QAASjB,KAAKN,MAAMW,qBACpBxD,KAAK,SACLqE,QAAS,kBAAM,EAAKC,uBAAuB,EAAKC,MAAM1F,UAAW,EAAK0F,MAAMzF,YAC5EmF,SAAUd,KAAKN,MAAMU,wBAJzB,sBAQA,cAACY,EAAA,EAAD,CACIC,QAASjB,KAAKN,MAAMY,mBACpBzD,KAAK,SACLqE,QAAS,kBAAM,EAAKG,gBAHxB,yBASR,0BAGHrB,KAAKN,MAAMO,eAQR,cAAC,EAAD,CACIvE,UAAWsE,KAAKN,MAAMhE,UACtBC,UAAWqE,KAAKN,MAAM/D,YAG1B,8BACI,oBAAId,MAAO,CAAEI,UAAW,QAAxB,kC,GA9OCqG,cCoBVC,EApBI,kBACf,cAAC7G,EAAA,EAAD,UACI,gCACI,oBAAIG,MAAO,CAAC2G,aAAa,OAAQvG,UAAU,QAA3C,SACI,4DAKA,cAAC,EAAD,IAEA,cAAC,EAAD,UCADwG,EAdA,WACX,OACI,iCACI,cAAC/G,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,UACI,eAACC,EAAA,EAAD,CAAKY,UAAY,mBAAmBX,MAAS,CAAC6G,UAAU,SAAxD,wBACY,gE,0BCsBjBC,EA5BA,WACX,OACI,iCACI,cAACC,EAAA,EAAD,CAAQC,GAAG,OAAOC,OAAO,KAAKb,QAAQ,OAAOc,kBAAgB,EAA7D,SACI,eAACrH,EAAA,EAAD,WACI,cAAC,gBAAD,CAAesH,GAAG,IAAlB,SACI,cAACJ,EAAA,EAAOK,MAAR,wCAEJ,cAACL,EAAA,EAAOM,OAAR,CAAeC,gBAAc,qBAC7B,cAACP,EAAA,EAAOQ,SAAR,CAAiBxB,GAAG,mBAApB,SACI,cAACyB,EAAA,EAAD,CAAK7G,UAAU,UAAf,SACI,cAAC,gBAAD,CAAewG,GAAG,MAAlB,SACI,cAACK,EAAA,EAAIC,KAAL,mCC0DjB7H,EAtEK,WAChB,OAEI,gCACI,6CACA,cAACC,EAAA,EAAD,UAEI,sHAMJ,6CACA,cAACA,EAAA,EAAD,UAEI,+BACI,6BACI,4CAKJ,6BACI,6BACI,2CAMR,6BACI,2CAKJ,6BACI,6BACI,4CAOR,6BACI,4CAKJ,6BAEI,6BACI,mGAShB,oBAAIG,MAAO,CAAEE,OAAQ,cC0BlBwH,G,MAvFI,WACf,OAEI,gCACI,kDACA,cAAC7H,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,UACI,cAAC,gBAAD,CAAeqH,GAAG,MAAMnH,MAAO,CAAE2H,OAAQ,WAAzC,SAEI,eAAC5H,EAAA,EAAD,WACI,qBACI6H,IAAI,2BACJjH,UAAU,0BACVF,MAAM,MACNT,MAAO,CAAC6H,MAAO,IACfC,MAAM,OACNC,IAAI,OAUR,oBAAIpH,UAAU,cAAd,SACI,wBAAQA,UAAU,MAAlB,kDCVjBqH,EApBE,WACb,OACI,cAACnI,EAAA,EAAD,UACI,gCACI,oBAAIG,MAAO,CAAE2G,aAAc,OAAQvG,UAAW,QAA9C,SACI,gDAKJ,cAAC,EAAD,IAEA,cAAC,EAAD,U,eCQD6H,MAlBf,WACE,OACE,cAAC,aAAD,UAEE,sBAAKtH,UAAU,MAAf,UACE,cAAC,EAAD,IACA,uBAAMX,MAAO,CAAEE,OAAQ,QAAvB,UACE,cAAC,IAAD,CAAOgI,KAAO,IAAIC,UAAWH,EAAUI,OAAK,IAC5C,cAAC,IAAD,CAAOF,KAAO,MAAMC,UAAWzB,OAGjC,cAAC,EAAD,UCLO2B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFlE,SAASC,eAAe,SAM1BsD,M","file":"static/js/main.af2f3567.chunk.js","sourcesContent":["import React from 'react'\nimport { Container, Row, Col, Accordion, Button, Card } from 'react-bootstrap'\n\n\nconst Description = () => {\n    return (\n\n        <div>\n            <h2>Description</h2>\n            <Container>\n                <p>Monte Carlo simulation is a method used to approximate numerical values. One example is approximating &pi;.  </p>\n\n                <p>Sample random number from [-1,1] from a uniform distribution and check if it lies inside/outside the unit circle. Approximate &pi; using the area of the circle and the square from [-1,1]</p>\n\n                <Row>\n                    <Col style={{ textAlign: \"center\" }}>\n                        <h5>\n                            &pi; =  4 A<sub>circle</sub> &frasl; A<sub>square</sub> =  4 (inside / (inside + outside))\n                        </h5>\n                    </Col>\n                </Row>\n\n\n            </Container>\n            <hr style={{ margin: \"20px\", }}></hr>\n        </div >\n\n    )\n}\n\nexport default Description","import React from 'react'\nimport { Spinner } from 'react-bootstrap'\n\nfunction Loader() {\n    return (\n        <div \n            style={{ marginTop: \"50px\" }}\n        >\n            <Spinner\n                animation='border'\n                role='status'\n                style={{\n                    height: '100px',\n                    width: '100px',\n                    margin: 'auto',\n                    display: 'block'\n                }}\n            >\n                <span className='sr-only'>Loading...</span>\n            </Spinner>\n            <h2 style={{textAlign: 'center', marginTop: \"50px\"}}>Loading...</h2>\n        </div>\n\n    )\n}\n\nexport default Loader\n","import React, { useState, useEffect } from 'react';\nimport { Container, Row, Col } from 'react-bootstrap'\nimport Plot from 'react-plotly.js';\nimport Loader from '../components/Loader'\nimport axios from 'axios'\n\n\n\nfunction Simulation2({ iteration, framerate }) {\n\n    const [data, setData] = useState()\n    const [loading, setLoading] = useState(true)\n    const [currentFrame, setCurrentFrame] = useState(0)\n\n\n    useEffect(() => {\n        if (loading) {\n            async function getData(iteration, framerate) {\n                const { data } = await axios.get(`/MonteCarlo/iteration=${iteration}_framerate=${framerate}`)\n                setData(data)\n                setLoading(false)\n                // console.log(data)\n            }\n            getData(iteration, framerate)\n        }\n    })\n\n\n    const iterationChangeHandler = (e) => {\n        const value = e.target.value\n        setCurrentFrame(value)\n    }\n\n    console.log(framerate)\n\n\n\n    return (\n        <div>\n            <h2 style={{ marginTop: \"10px\" }} >Simulation </h2>\n            {\n                loading ?\n                    <Loader />\n                    :\n                    <Container >\n                        <Row\n                            className=\"d-flex justify-items-center\"\n                        >\n                        </Row>\n                        <Row>\n                            {/* {plots} */}\n                            <Col >\n\n                                <Plot\n                                    data={[\n                                        {\n                                            x: data.points[currentFrame].x,\n                                            y: data.points[currentFrame].y,\n                                            type: 'scatter',\n                                            mode: 'markers',\n                                            marker: { color: data.points[currentFrame].color },\n                                        },\n                                        {\n                                            x: data.circle.x,\n                                            y: data.circle.y,\n                                            mode: 'line',\n                                            marker: { color: data.circle.color },\n                                        },\n                                    ]}\n                                    layout={{\n                                        width: window.innerWidth / 2.5 < window.innerHeight / 2.5 ? window.innerWidth / 2.5 : window.innerHeight / 2.5,\n                                        height: window.innerWidth / 2.5 < window.innerHeight / 2.5 ? window.innerWidth / 2.5 : window.innerHeight / 2.5,\n                                        // width: \"300\",\n                                        // height: \"300\",\n                                        margin: {\n                                            l: 40,\n                                            r: 40,\n                                            b: 40,\n                                            t: 40,\n                                            pad: 0\n                                        },\n                                        showlegend: false,\n                                        xaxis: {\n                                            range: [-1.1, 1.1]\n                                        },\n                                        yaxis: {\n                                            range: [-1.1, 1.1]\n                                        },\n                                        font: {\n                                            family: 'Helvetica',\n                                            size: 16\n                                        },\n                                    }}\n                                // key={index}\n                                />\n                            </Col>\n\n                            <Col >\n\n                                <Plot\n                                    data={[\n                                        {\n                                            x: data.points[currentFrame].approx_pi_x,\n                                            y: data.points[currentFrame].approx_pi_y,\n                                            name: 'Approximation',\n                                            marker: { color: \"black\" },\n                                            mode: 'lines',\n                                            line: {\n                                                width: 3\n                                            },\n\n                                        },\n                                        {\n                                            x: data.Pi.x,\n                                            y: data.Pi.y,\n                                            name: 'pi',\n                                            mode: 'lines',\n                                            line: {\n                                                dash: 'dashdot',\n                                                width: 1\n                                            },\n                                            marker: { color: \"black\" },\n                                        }\n\n                                    ]}\n                                    layout={{\n                                        width: window.innerWidth / 2.5 < window.innerHeight / 2.5 ? window.innerWidth / 2.5 : window.innerHeight / 2.5,\n                                        height: window.innerWidth / 2.5 < window.innerHeight / 2.5 ? window.innerWidth / 2.5 : window.innerHeight / 2.5,\n\n                                        margin: {\n                                            l: 40,\n                                            r: 40,\n                                            b: 60,\n                                            t: 40,\n                                            pad: 0\n                                        },\n                                        showlegend: true,\n                                        legend: {\n                                            x: 1,\n                                            xanchor: 'right',\n                                            y: 0\n                                          },\n                                        xaxis: {\n                                            range: [0, iteration],\n                                            title: 'Iterations',\n                                            tick0: 0,\n                                            dtick: framerate,\n                                        },\n                                        yaxis: {\n                                            range: [0, 4],\n                                            tick0: 0,\n                                            dtick: 1,\n                                        },\n                                        font: {\n                                            family: 'Helvetica',\n                                            size: 16\n                                        },\n\n\n                                    }}\n                                // key={index}\n                                />\n                            </Col>\n\n\n                            <input\n                                type=\"range\"\n                                min={0}\n                                // max={this.props.iteration / this.props.framerate}\n                                max={(iteration / framerate)}\n                                name='simulation_value'\n                                style={{ height: \"50%\", width: \"100%\" }}\n                                step={1}\n                                value={currentFrame}\n                                onChange={(e) => iterationChangeHandler(e)}\n                            />\n                        </Row>\n\n                        <h3 style={{ textAlign: \"center\", marginTop: \"10px\" }}> Frame #{currentFrame} </h3>\n                        <h3 style={{ textAlign: \"center\" }}> Iteration #{currentFrame * framerate} </h3>\n\n\n                        <Row style={{ marginTop: \"40px\" }}>\n\n                            <Col >\n                                <h3 style={{ color: \"#45b6fe\", textAlign: \"center\" }}>\n                                    Inside\n                                </h3>\n                                <h3 style={{ color: \"black\", marginTop: \"10px\", textAlign: \"center\" }}>\n                                    {data.points[currentFrame].inside}\n                                </h3>\n                            </Col>\n                            <Col >\n                                <h3 style={{ color: \"#FF0000\", textAlign: \"center\" }}>\n                                    Outside\n                                </h3>\n                                <h3 style={{ color: \"black\", marginTop: \"10px\", textAlign: \"center\" }}>\n                                    {data.points[currentFrame].outside}\n                                </h3>\n\n                            </Col>\n                            <Col >\n                                <h3 style={{ color: \"black\", textAlign: \"center\" }}>\n                                    &pi;\n                                </h3>\n                                <h3 style={{ marginTop: \"10px\", textAlign: \"center\" }}>\n                                    {data.points[currentFrame].approx_pi.toFixed(5)}\n                                </h3>\n\n                            </Col>\n                        </Row>\n\n\n\n\n\n                    </Container>\n\n            }\n\n\n\n        </div >\n\n    )\n}\n\nexport default Simulation2\n\n\n","import React, { Component } from 'react';\nimport { useDebugValue } from 'react';\nimport { Form, Button, Container, Row, Col } from 'react-bootstrap'\nimport Simulation2 from './Simulation2'\n\nimport \"./styles.css\"\n\nclass Parameters extends Component {\n    // set state\n\n    state = {\n        'iteration': 1000,\n        'framerate': 100,\n        'showSimulation': false,\n        'disableSimulationButton': false,\n        'successButtonVariant': \"success\",\n        'resetButtonVariant': \"secondary\",\n\n    };\n\n    componentDidMount() {\n        this.setState({\n            showSimulation: false,\n        })\n    }\n\n    componentDidUpdate() {\n\n        // Toggle bar update \n        if (Number(this.state.framerate) > Number(this.state.iteration)) {\n            this.setState({\n                framerate: Number(this.state.iteration)\n            })\n        }\n    }\n\n\n    iterationChangeHandler = (e) => {\n        let value = e.target.value\n        if (value === 0)\n            value = 1\n        document.getElementById(\"points\").value = value\n        this.setState({\n            iteration: value\n        })\n        if (this.state.framerate > this.state.iteration) {\n            this.setState({\n                framerate: value\n            })\n        }\n    }\n\n    framerateChangeHandler = (e) => {\n        let value = e.target.value\n\n        if (value > 500) {\n            value = 1000\n        } else if (value > 200) {\n            value = 500\n        } else if (useDebugValue > 100) {\n            value = 200\n        } else if (value > 50) {\n            value = 100\n        } else if (value > 20) {\n            value = 50\n        } else if (value > 10) {\n            value = 20\n        } else if (value > 5) {\n            value = 10\n        } else if (value > 2) {\n            value = 5\n        } else if (value > 1) {\n            value = 2\n        }\n\n\n        this.setState({\n            framerate: value\n        })\n    }\n\n    async resetHandler () {\n\n        document.getElementById(\"points\").value = 1000;\n\n        // this.setState({\n        //     iteration: 1000,\n        //     framerate: 100,\n        //     showSimulation: false,\n        //     disableSimulationButton: false,\n        //     successButtonVariant:  \"success\",\n        //     resetButtonVariant:\"secondary\",\n\n        // })\n\n        await this.setStateAsync({ iteration: 1000, });\n        await this.setStateAsync({  framerate: 100, });\n        await this.setStateAsync({  showSimulation: false,});\n        await this.setStateAsync({ disableSimulationButton: false});\n        await this.setStateAsync({  successButtonVariant:  \"success\",});\n        await this.setStateAsync({  resetButtonVariant:\"secondary\",});\n\n\n    }\n\n    async simulateOnClickHandler() {\n        await this.setStateAsync({ showSimulation: true, });\n        await this.setStateAsync({ disableSimulationButton: true });\n        await this.setStateAsync({ successButtonVariant: \"secondary\" });\n        await this.setStateAsync({ resetButtonVariant: \"info\" });\n\n\n\n    }\n\n    setStateAsync(state) {\n        return new Promise((resolve) => {\n            this.setState(state, resolve)\n        });\n    }\n\n    render() {\n        return (\n            <div>\n\n                <h2> Parameters</h2>\n\n                <Container>\n\n                    <Row>\n                        <Col>\n                            <Form.Label>\n                                <strong>\n                                    Iterations\n                                </strong>\n                            </Form.Label>\n\n                            <Form.Control\n                                id=\"points\"\n                                type=\"points\"\n                                placeholder={this.state.iteration}\n                                style={{ width: \"80%\" }}\n                                onChange={(e) => this.iterationChangeHandler(e)}\n                                disabled={this.state.disableSimulationButton}\n                            />\n\n                            <input\n                                type=\"range\"\n                                min=\"0\"\n                                max=\"10000\"\n                                name='simulation_value'\n                                style={{ height: \"50%\", width: \"80%\" }}\n                                step=\"100\"\n                                value={this.state.iteration - 1}\n                                onChange={(e) => this.iterationChangeHandler(e)}\n                                disabled={this.state.disableSimulationButton}\n                            />\n                        </Col>\n                        <Col>\n\n                            {/* Change framerate to a dropdown\n                        1 2 5 10 50 100 200 500 1000 */}\n                            <Form.Label>\n                                <strong>\n                                    Frame Rate\n                                </strong>\n                            </Form.Label>\n\n                            {/* <Form.Control\n                                type=\"points\"\n                                placeholder={this.state.framerate}\n                                style={{ width: \"80%\" }}\n                                onChange={(e) => this.framerateChangeHandler(e)}\n                                text={100}\n\n\n\n                            /> */}\n\n                            <Form.Control\n                                as='select'\n                                value = {this.state.framerate}\n                                onChange={(e) => this.framerateChangeHandler(e)}\n                                style={{width:\"80%\"}}\n                                disabled={this.state.disableSimulationButton}\n                            >\n                                <option value={1}>1</option>\n                                <option value={10}>10</option>\n                                <option value={50}>50</option>\n                                <option value={100}>100</option>\n                                <option value={500}>500</option>\n                                <option value={1000}>1000</option>\n\n                            </Form.Control>\n\n\n                            <input\n                                type=\"range\"\n                                min={1}\n                                max={this.state.iteration < 1000 ? this.state.iteration : 1000}\n                                // step={10}\n                                name='iteration'\n                                style={{ height: \"50%\", width: \"80%\" }}\n                                value={this.state.framerate}\n                                onChange={(e) => this.framerateChangeHandler(e)}\n                                disabled={this.state.disableSimulationButton}\n                            />\n\n                        </Col>\n\n                        <Col style={{ marginTop: \"80px\" }}>\n                            <Button\n                                variant={this.state.successButtonVariant}\n                                type=\"submit\"\n                                onClick={() => this.simulateOnClickHandler(this.props.iteration, this.props.framerate)}\n                                disabled={this.state.disableSimulationButton}\n                            >\n                                Simulate\n                            </Button>\n                            <Button\n                                variant={this.state.resetButtonVariant}\n                                type=\"submit\"\n                                onClick={() => this.resetHandler()}\n                            >\n                                Reset\n                            </Button>\n                        </Col>\n                    </Row>\n                    < hr />\n\n                </Container>\n                {this.state.showSimulation ?\n                    // <Simulation\n                    //     startSimulation={true}\n                    //     iteration={this.state.iteration}\n                    //     framerate={this.state.framerate}\n                    //     loading={true}\n                    // />\n\n                    <Simulation2\n                        iteration={this.state.iteration}\n                        framerate={this.state.framerate}\n                    />\n                    :\n                    <div>\n                        <h2 style={{ marginTop: \"10px\" }} >Simulation </h2>\n\n                    </div>\n\n\n                }\n\n\n\n\n            </div>\n        )\n\n    }\n\n}\n\nexport default Parameters","import React from 'react'\nimport {  Container } from 'react-bootstrap';\nimport Description from './Description'\nimport Parameters from './Parameters'\n// import Footer from './Footer'\n\n\nconst MonteCarlo = () => (\n    <Container >\n        <div>\n            <h1 style={{marginBottom:\"20px\", marginTop:\"40px\"}}>\n                <strong>\n                    Approximating &pi;\n\n                </strong>\n            </h1>\n                <Description />\n\n                <Parameters />\n\n                \n        </div>\n    </Container>\n\n)\n\n\nexport default MonteCarlo","import React from 'react'\nimport {Container, Row, Col} from 'react-bootstrap'\n\n\nconst Footer = () => {\n    return (\n        <footer>\n            <Container>\n                <Row>\n                    <Col className = 'text-center py-3' style = {{minHeight:'-80px'}}>\n                     Created by <strong>Kazuka G. Ohashi</strong>\n                    </Col>\n                </Row>\n            </Container>\n        </footer>\n    )\n}\n\nexport default Footer","import React from 'react'\nimport { Navbar, Nav,  Container } from 'react-bootstrap'\nimport { LinkContainer } from 'react-router-bootstrap'\n\nconst Header = () => {\n    return (\n        <header>\n            <Navbar bg=\"dark\" expand=\"lg\" variant='dark' collapseOnSelect>\n                <Container>\n                    <LinkContainer to=\"/\">\n                        <Navbar.Brand>Monte Carlo Simulation </Navbar.Brand>\n                    </LinkContainer>\n                    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                    <Navbar.Collapse id=\"basic-navbar-nav\">\n                        <Nav className=\"mr-auto\">\n                            <LinkContainer to=\"/pi\">\n                                <Nav.Link>&pi;</Nav.Link>\n                            </LinkContainer>\n                            {/* <LinkContainer to='/protein'>\n                                <Nav.Link href=\"/protein\"> Protein Movement</Nav.Link>\n                            </LinkContainer> */}\n\n                        </Nav>\n\n                    </Navbar.Collapse>\n                </Container>\n\n            </Navbar>\n        </header>\n    )\n}\n\nexport default Header","import React from 'react'\nimport { Container } from 'react-bootstrap'\n\n\nconst Description = () => {\n    return (\n\n        <div>\n            <h2>Description</h2>\n            <Container>\n\n                <h5>Here we present a project of approximating &pi; using Monte Carlo simulations . </h5>\n\n\n\n            </Container>\n\n            <h2>Tech Stacks</h2>\n            <Container>\n\n                <ol>\n                    <h3>\n                        <li>\n                            Frontend\n                      </li>\n                    </h3>\n\n                    <ul>\n                        <li>\n                            <h5>\n                                React\n\n                            </h5>\n                        </li>\n                    </ul>\n                    <h3>\n                        <li>\n                            Backend\n\n                        </li>\n                    </h3>\n                    <ul>\n                        <li>\n                            <h5>\n                                Django\n\n                            </h5>\n                        </li>\n\n                    </ul>\n                    <h3>\n                        <li>\n                                API call\n\n                        </li>\n                    </h3>\n                    <ul>\n\n                        <li>\n                            <h5>\n                            Django Rest Framework (API call via axios from frontend)\n\n                            </h5>\n                        </li>\n                    </ul>\n                </ol>\n\n            </Container>\n            <hr style={{ margin: \"20px\", }}></hr>\n        </div>\n\n    )\n}\n\nexport default Description","import React from 'react'\nimport { Container, Row, Col, Image,  } from 'react-bootstrap'\nimport { LinkContainer } from 'react-router-bootstrap'\nimport Footer from '../components/Footer'\nimport './stylesHomepage.css'\n\n\nconst Navigation = () => {\n    return (\n\n        <div>\n            <h2>Link to Projects</h2>\n            <Container>\n                <Row>\n                    <LinkContainer to='/pi' style={{ cursor: \"pointer\" }}>\n\n                        <Col>\n                            <img\n                                src=\"../images/montecarlo.png\"\n                                className=\"rounded mx-auto d-block\"\n                                width=\"95%\"\n                                style={{hover: ''}}\n                                fluid=\"true\"\n                                alt=\"pi\"\n                            />\n                             {/* <img\n                                src=\"montecarlo.png\"\n                                className=\"rounded mx-auto d-block\"\n                                width=\"95%\"\n                                style={{hover: ''}}\n                                fluid=\"true\"\n                                alt=\"pi\"\n                            /> */}\n                            <h4 className='text-center' >\n                                <strong className=\"txt\" >\n                                    Approximating &pi;\n                            </strong>\n                            </h4>\n\n                        </Col>\n                    </LinkContainer>\n\n                    {/* <LinkContainer to='/protein' style={{ cursor: \"pointer\" }}>\n\n                        <Col>\n                            <Image\n                                src=\"../images/figure_0.png\"\n                                className=\"rounded mx-auto d-block\"\n                                width=\"95%\"\n                                fluid\n                            />\n                            <h4 className='text-center' >\n                                <strong className=\"txt\">\n                                    Protein Movement\n                            </strong>\n                            </h4>\n\n                        </Col>\n                    </LinkContainer> */}\n\n                </Row>\n\n                {/* <hr /> */}\n\n                {/* <Row>\n                    <LinkContainer to='/protein' style={{ cursor: \"pointer\" }}>\n\n                        <Col>\n                            <Image\n                                src=\"../images/tugofwar.gif\"\n                                className=\"rounded mx-auto d-block\"\n                                width=\"95%\"\n                                alt=\"protein\"\n                                fluid\n                            />\n                            <h4 className='text-center' >\n                                <strong className=\"txt\">\n                                    Protein Movement\n    </strong>\n                            </h4>\n\n                        </Col>\n                    </LinkContainer>\n                </Row> */}\n\n\n            </Container>\n\n\n        </div>\n\n    )\n}\n\nexport default Navigation","import { Container } from 'react-bootstrap'\nimport Description from './Description'\nimport Navigation from './Navigation'\n\nconst Homepage = () => {\n    return (\n        <Container>\n            <div>\n                <h1 style={{ marginBottom: \"20px\", marginTop: \"40px\" }}>\n                    <strong>\n                        Homepage\n                </strong>\n                </h1>\n\n                <Description />\n\n                <Navigation />\n\n            </div>\n        </Container>\n\n    )\n}\n\nexport default Homepage\n","import MonteCarlo from './MonteCarlo/MonteCarlo'\nimport Footer from './components/Footer'\nimport Header from './components/Header'\nimport Homepage from './Homepage/Homepage'\nimport { HashRouter as Router, Route } from 'react-router-dom'\n\nfunction App() {\n  return (\n    <Router>\n\n      <div className=\"App\">\n        <Header />\n        <main style={{ margin: \"20px\", }}>\n          <Route path = '/' component={Homepage} exact />\n          <Route path = '/pi' component={MonteCarlo} />\n\n        </main>\n        <Footer />\n      </div>\n    </Router>\n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './bootstrap.min.css'\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}